// Generated by CoffeeScript 1.3.1
(function() {
  var $, asm, assemble, cpu, dasm, dcpu, decode, dumpMemory, lem1802, regs, reset, run, timer, updateCycles, updateRegs;

  $ = require('jquery-browserify');

  dcpu = require('../dcpu');

  dasm = require('../dcpu-disasm');

  decode = require('../dcpu-decode');

  asm = require('../dcpu-asm');

  lem1802 = require('../hw/lem1802');

  cpu = new dcpu.Dcpu16();

  cpu.onPostExec = function(i) {
    var disasm, id;
    disasm = dasm.Disasm.ppInstr(i);
    $(".instruction").removeClass("current-instruction");
    id = "#pc" + (i.addr());
    $(id).addClass("current-instruction");
    return window.editor.setLineClass(1, "myclass", "myclass");
  };

  regs = [];

  timer = null;

  updateRegs = function() {
    var i, v, _i, _len, _results;
    _results = [];
    for (i = _i = 0, _len = regs.length; _i < _len; i = ++_i) {
      v = regs[i];
      _results.push(v.html('0x' + dasm.Disasm.fmtHex(cpu.readReg(i))));
    }
    return _results;
  };

  updateCycles = function() {
    var cycles;
    cycles = "" + cpu.mCycles;
    return $("#cycles").html(cycles);
  };

  dumpMemory = function() {
    var base, body, c, col, html, r, row, v, _i, _j, _results;
    base = $("#membase").val();
    if (!base) {
      base = 0;
    }
    base = parseInt(base);
    body = $("#memdump-body");
    body.empty();
    _results = [];
    for (r = _i = 0; _i <= 4; r = ++_i) {
      row = $("<tr><td>" + (dasm.Disasm.fmtHex(base + (r * 8))) + "</td></tr>");
      for (c = _j = 0; _j <= 7; c = ++_j) {
        v = cpu.readMem(base + (r * 8) + c);
        html = "<td>" + (dasm.Disasm.fmtHex(v)) + "</td>";
        col = $(html);
        row.append(col);
      }
      _results.push(body.append(row));
    }
    return _results;
  };

  assemble = function(text) {
    var state;
    text = window.editor.getValue();
    state = new asm.Assembler().assemble(text);
    if (state.result !== "success") {
      return $("#asm-error").html("Error: Line " + state.line + ": " + state.message);
    }
    $("#asm-error").html("");
    cpu.loadBinary(state.code);
    return cpu.regPC(0);
  };

  run = function() {
    var cb;
    cb = function() {
      var i, _i;
      for (i = _i = 0; _i <= 10001; i = ++_i) {
        cpu.step();
      }
      updateRegs();
      return updateCycles();
    };
    if (timer) {
      clearInterval(timer);
    }
    return timer = setInterval(cb, 50);
  };

  reset = function() {
    cpu.reset();
    assemble();
    updateRegs();
    updateCycles();
    return dumpMemory();
  };

  $(function() {
    var canvas, fb;
    regs = [$("#RegA"), $("#RegB"), $("#RegC"), $("#RegX"), $("#RegY"), $("#RegZ"), $("#RegI"), $("#RegJ"), $("#RegPC"), $("#RegSP"), $("#RegO")];
    $("#btnStep").click(function() {
      cpu.step();
      return updateRegs();
    });
    $("#btnAssemble").click(assemble);
    $("#membase").change(function() {
      var base;
      base = $("#membase").val();
      if (!base) {
        base = 0;
      }
      return dumpMemory(parseInt(base));
    });
    $("#btnRun").click(function() {
      return run();
    });
    $("#btnStop").click(function() {
      if (timer) {
        clearInterval(timer);
        return timer = null;
      }
    });
    $("#btnReset").click(reset);
    canvas = $("#framebuffer")[0];
    fb = new lem1802.Lem1802(cpu, canvas);
    cpu.addDevice(fb);
    updateCycles();
    assemble();
    updateRegs();
    return dumpMemory();
  });

}).call(this);
