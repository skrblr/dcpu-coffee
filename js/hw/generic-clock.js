// Generated by CoffeeScript 1.3.1
(function() {
  var Device, GenericClock, Module, device,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  Module = {};

  device = require("./device");

  Device = device.Device;

  GenericClock = (function(_super) {

    __extends(GenericClock, _super);

    GenericClock.name = 'GenericClock';

    function GenericClock(cpu) {
      GenericClock.__super__.constructor.call(this, "Generic Clock", cpu);
      this.mCount = 0;
      this.mLastCount = 0;
      this.mIrqMsg = 0;
    }

    GenericClock.prototype.id = function() {
      return 0x12d0b402;
    };

    GenericClock.prototype.mfgr = function() {
      return 0x0;
    };

    GenericClock.prototype.ver = function() {
      return 0x1;
    };

    GenericClock.prototype.hwInterrupt = function() {
      switch (this.mCpu.regA()) {
        case 0:
          return this.setRate();
        case 1:
          return this.getTicks();
        case 2:
          return this.setInterrupts();
        default:
          return;
      }
    };

    GenericClock.prototype.setRate = function() {
      return this.mRate = this.mCpu.regB();
    };

    GenericClock.prototype.getTicks = function() {
      var elapsed;
      elapsed = this.mCount - this.mLastCount;
      this.mLastCount = this.mCount;
      return this.mCpu.regC(elapsed);
    };

    GenericClock.prototype.setInterrupts = function() {
      return this.mIrqMsg = this.mCpu.regB();
    };

    return GenericClock;

  })(Device);

  exports.GenericClock = GenericClock;

}).call(this);
