// Generated by CoffeeScript 1.3.1
(function() {
  var Device, Lem1802, Module, device,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  Module = {};

  device = require("./device");

  Device = device.Device;

  Lem1802 = (function(_super) {

    __extends(Lem1802, _super);

    Lem1802.name = 'Lem1802';

    function Lem1802(cpu) {
      Lem1802.__super__.constructor.call(this, "LEM1802", cpu);
      this.mFontAddr = 0;
      this.mPaletteAddr = 0;
    }

    Lem1802.prototype.id = function() {
      return 0x7349f615;
    };

    Lem1802.prototype.mfgr = function() {
      return 0x1c6c8b38;
    };

    Lem1802.prototype.ver = function() {
      return 0x1802;
    };

    Lem1802.prototype.hwInterrupt = function() {
      switch (this.mCpu.regA()) {
        case 0:
          return this.memMapScreen();
        case 1:
          return this.memMapFont();
        case 2:
          return this.memMapPalette();
        case 3:
          return this.setBorderColor();
        default:
          return;
      }
    };

    Lem1802.prototype.memMapScreen = function() {
      var base;
      base = this.mCpu.regB();
      return this.mapMemory(base, this.VID_RAM_SIZE);
    };

    Lem1802.prototype.memMapFont = function() {
      var base;
      base = this.mCpu.regB();
      if (base === 0) {
        this.unmapMemory(this.mFontAddr);
        return this.mFontAddr = 0;
      } else {
        this.mapMemory(base, this.FONT_RAM_SIZE);
        return this.mFontAddr = base;
      }
    };

    Lem1802.prototype.memMapPalette = function() {
      var base;
      base = this.mCpu.regB();
      if (base === 0) {
        this.unmapMemory(this.mPaletteAddr);
        return this.mPaletteAddr = 0;
      } else {
        this.mapMemory(base, this.PALETTE_RAM_SIZE);
        return this.mPaletteAddr = base;
      }
    };

    Lem1802.prototype.setBorderColor = function() {
      return;
    };

    Lem1802.prototype.VID_RAM_SIZE = 386;

    Lem1802.prototype.FONT_RAM_SIZE = 256;

    Lem1802.prototype.PALETTE_RAM_SIZE = 16;

    Lem1802.DFL_FONT = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0];

    Lem1802.DFL_PALETTE = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0];

    return Lem1802;

  })(Device);

  exports.Lem1802 = Lem1802;

}).call(this);
