// Generated by CoffeeScript 1.3.1
(function() {
  var Dcpu16, IStream, Instr, Module, Value, decode;

  Module = {};

  decode = require('./dcpu-decode');

  Value = decode.Value;

  Instr = decode.Instr;

  IStream = decode.IStream;

  Dcpu16 = (function() {

    Dcpu16.name = 'Dcpu16';

    function Dcpu16() {
      var cpu, x;
      cpu = this;
      this.mCycles = 0;
      this.mSkipNext = false;
      this.mMemory = (function() {
        var _i, _results;
        _results = [];
        for (x = _i = 0; 0 <= 0xffff ? _i <= 0xffff : _i >= 0xffff; x = 0 <= 0xffff ? ++_i : --_i) {
          _results.push(0);
        }
        return _results;
      })();
      this.mIStream = new IStream(this.mMemory);
      this.mRegStorage = (function() {
        var _i, _results;
        _results = [];
        for (x = _i = 0; 0 <= 0xf ? _i <= 0xf : _i >= 0xf; x = 0 <= 0xf ? ++_i : --_i) {
          _results.push(0);
        }
        return _results;
      })();
      this.mRegStorage[Value.REG_SP] = 0xffff;
      this.mRegAccess = [
        this._regGen(Value.REG_A), this._regGen(Value.REG_B), this._regGen(Value.REG_C), this._regGen(Value.REG_X), this._regGen(Value.REG_Y), this._regGen(Value.REG_Z), this._regGen(Value.REG_I), this._regGen(Value.REG_J), function(v) {
          return cpu.mIStream.index(v);
        }, this._regGen(Value.REG_SP), this._regGen(Value.REG_O)
      ];
    }

    Dcpu16.prototype.onPreExec = function(fn) {
      return this.mPreExec = fn;
    };

    Dcpu16.prototype.onPostExec = function(fn) {
      return this.mPostExec = fn;
    };

    Dcpu16.prototype.onCondFail = function(fn) {
      return this.mCondFail = fn;
    };

    Dcpu16.prototype.reg = function(n, v) {
      return this.mRegAccess[n](v);
    };

    Dcpu16.prototype.regA = function(v) {
      return this.reg(Value.REG_A, v);
    };

    Dcpu16.prototype.regB = function(v) {
      return this.reg(Value.REG_B, v);
    };

    Dcpu16.prototype.regC = function(v) {
      return this.reg(Value.REG_C, v);
    };

    Dcpu16.prototype.regX = function(v) {
      return this.reg(Value.REG_X, v);
    };

    Dcpu16.prototype.regY = function(v) {
      return this.reg(Value.REG_Y, v);
    };

    Dcpu16.prototype.regZ = function(v) {
      return this.reg(Value.REG_Z, v);
    };

    Dcpu16.prototype.regI = function(v) {
      return this.reg(Value.REG_I, v);
    };

    Dcpu16.prototype.regJ = function(v) {
      return this.reg(Value.REG_J, v);
    };

    Dcpu16.prototype.regSP = function(v) {
      return this.reg(Value.REG_SP, v);
    };

    Dcpu16.prototype.regO = function(v) {
      return this.reg(Value.REG_O, v);
    };

    Dcpu16.prototype.regPC = function(v) {
      return this.reg(Value.REG_PC, v);
    };

    Dcpu16.prototype.readReg = function(n) {
      return this.reg(n);
    };

    Dcpu16.prototype.writeReg = function(n, val) {
      return this.reg(n, val);
    };

    Dcpu16.prototype.readMem = function(addr) {
      return this.mMemory[addr];
    };

    Dcpu16.prototype.writeMem = function(addr, val) {
      return this.mMemory[addr] = val;
    };

    Dcpu16.prototype.push = function(v) {
      var sp;
      sp = this.regSP(this.regSP() - 1);
      return this.mMemory[sp] = v;
    };

    Dcpu16.prototype.peek = function() {
      var sp;
      sp = this.regSP();
      return this.mMemory[sp];
    };

    Dcpu16.prototype.pop = function() {
      var sp;
      sp = this.regSP(this.regSP() + 1);
      return this.mMemory[sp - 1];
    };

    Dcpu16.prototype.loadBinary = function(bin, base) {
      var i, x, _i, _len;
      if (base == null) {
        base = 0;
      }
      for (i = _i = 0, _len = bin.length; _i < _len; i = ++_i) {
        x = bin[i];
        this.mMemory[base + i] = x;
      }
      return this.regPC(base);
    };

    Dcpu16.prototype.step = function() {
      var i;
      i = new Instr(this.mIStream);
      if (this.mSkipNext) {
        this.mSkipNext = false;
        if (this.mCondFail != null) {
          this.mCondFail(i);
        }
        return this.step();
      }
      if (this.mPreExec != null) {
        this.mPreExec(i);
      }
      this.exec(i.opc(), i.valA(), i.valB());
      if (this.mPostExec != null) {
        return this.mPostExec(i);
      }
    };

    Dcpu16.prototype.run = function() {
      var _results;
      this.mRun = true;
      _results = [];
      while (this.mRun) {
        _results.push(this.step());
      }
      return _results;
    };

    Dcpu16.prototype.stop = function() {
      return this.mRun = false;
    };

    Dcpu16.prototype.execAdv = function(opc, valA) {
      switch (opc) {
        case Instr.ADV_JSR:
          this.push(this.regPC());
          return this.regPC(valA.get());
      }
    };

    Dcpu16.prototype.exec = function(opc, valA, valB) {
      var v;
      switch (opc) {
        case Instr.OPC_ADV:
          return this.execAdv(valA.raw(), valB);
        case Instr.OPC_SET:
          return valA.set(this, valB.get(this));
        case Instr.OPC_ADD:
          this.mCycles += 1;
          v = valA.get(this) + valB.get(this);
          if (v > 0xffff) {
            this.regO(1);
            v -= 0xffff;
          } else {
            this.regO(0);
          }
          return valA.set(this, v);
        case Instr.OPC_SUB:
          this.mCycles += 1;
          v = valA.get(this) - valB.get(this);
          if (v < 0) {
            this.regO(0xffff);
            v += 0xffff;
          } else {
            this.regO(0);
          }
          return valA.set(this, v);
        case Instr.OPC_MUL:
          this.mCycles += 1;
          v = valA.get(this) * valB.get(this);
          valA.set(this, v & 0xffff);
          return this.regO((v >> 16) & 0xffff);
        case Instr.OPC_DIV:
          this.mCycles += 2;
          if (valB.get(this) === 0) {
            return regA.set(0);
          } else {
            v = valA.get(this) / valB.get(this);
            valA.set(this, v & 0xffff);
            return this.regO(((valA.get() << 16) / valB.get) & 0xffff);
          }
          break;
        case Instr.OPC_MOD:
          this.mCycles += 2;
          if (valB.get(this) === 0) {
            return regA.set(0);
          } else {
            return valA.set(valA.get(this) % valB.get(this));
          }
          break;
        case Instr.OPC_SHL:
          this.mCycles += 1;
          valA.set(this, valA.get(this) << valB.get(this));
          return this.regO(((valA.get(this) << valB.get(this)) >> 16) & 0xffff);
        case Instr.OPC_SHR:
          this.mCycles += 1;
          valA.set(this, valA.get(this) >> valB.get(this));
          return this.regO(((valA.get(this) << 16) >> valB.get(this)) & 0xffff);
        case Instr.OPC_AND:
          return valA.set(this, valA.get(this) & valB.get(this));
        case Instr.OPC_BOR:
          return valA.set(this, valA.get(this) | valB.get(this));
        case Instr.OPC_XOR:
          return valA.set(this, valA.get(this) ^ valB.get(this));
        case Instr.OPC_IFE:
          if (valA.get(this) === valB.get(this)) {
            return this.mCycles += 2;
          } else {
            this.mSkipNext = true;
            return this.mCycles += 1;
          }
          break;
        case Instr.OPC_IFN:
          if (valA.get(this) !== valB.get(this)) {
            return this.mCycles += 2;
          } else {
            this.mSkipNext = true;
            return this.mCycles += 1;
          }
          break;
        case Instr.OPC_IFG:
          if (valA.get(this) > valB.get(this)) {
            return this.mCycles += 2;
          } else {
            this.mSkipNext = true;
            return this.mCycles += 1;
          }
          break;
        case Instr.OPC_IFB:
          if ((valA.get(this) & valB.get(this)) !== 0) {
            return this.mCycles += 2;
          } else {
            this.mSkipNext = true;
            return this.mCycles += 1;
          }
      }
    };

    Dcpu16.prototype._regGen = function(n) {
      var cpu;
      cpu = this;
      return function(v) {
        if (v != null) {
          return cpu.mRegStorage[n] = v;
        } else {
          return cpu.mRegStorage[n];
        }
      };
    };

    return Dcpu16;

  })();

  exports.Dcpu16 = Dcpu16;

}).call(this);
