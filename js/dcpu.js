// Generated by CoffeeScript 1.3.1
(function() {
  var Dcpu16, Instr, Module, Value, decode;

  Module = {};

  decode = require('./dcpu-decode');

  Value = decode.Value;

  Instr = decode.Instr;

  Dcpu16 = (function() {

    Dcpu16.name = 'Dcpu16';

    function Dcpu16(program) {
      var i, x, _i, _j, _len;
      if (program == null) {
        program = [];
      }
      this.mCycles = 0;
      this.mRegs = [];
      this.mSkipNext = false;
      for (x = _i = 0; 0 <= 0xf ? _i <= 0xf : _i >= 0xf; x = 0 <= 0xf ? ++_i : --_i) {
        this.mRegs[x] = 0;
      }
      this.mRegs[Value.REG_SP] = 0xffff;
      this.mMemory = (function() {
        var _j, _results;
        _results = [];
        for (x = _j = 0; 0 <= 0xffff ? _j <= 0xffff : _j >= 0xffff; x = 0 <= 0xffff ? ++_j : --_j) {
          _results.push(0);
        }
        return _results;
      })();
      for (i = _j = 0, _len = program.length; _j < _len; i = ++_j) {
        x = program[i];
        this.mMemory[i] = x;
      }
    }

    Dcpu16.prototype.onPreExec = function(fn) {
      return this.mPreExec = fn;
    };

    Dcpu16.prototype.onPostExec = function(fn) {
      return this.mPostExec = fn;
    };

    Dcpu16.prototype.onCondFail = function(fn) {
      return this.mCondFail = fn;
    };

    Dcpu16.prototype.readReg = function(n) {
      return this.mRegs[n];
    };

    Dcpu16.prototype.writeReg = function(n, val) {
      return this.mRegs[n] = val;
    };

    Dcpu16.prototype.readMem = function(addr) {
      return this.mMemory[addr];
    };

    Dcpu16.prototype.writeMem = function(addr, val) {
      return this.mMemory[addr] = val;
    };

    Dcpu16.prototype.push = function() {
      return --this.mRegs[Value.REG_SP];
    };

    Dcpu16.prototype.peek = function() {
      return this.mRegs[Value.REG_SP];
    };

    Dcpu16.prototype.pop = function() {
      return this.mRegs[Value.REG_SP]++;
    };

    Dcpu16.prototype.reg = function(n, v) {
      if (v != null) {
        return this.mRegs[n] = v;
      } else {
        return this.mRegs[n];
      }
    };

    Dcpu16.prototype.regA = function(v) {
      return this.reg(Value.REG_A, v);
    };

    Dcpu16.prototype.regB = function(v) {
      return this.reg(Value.REG_B, v);
    };

    Dcpu16.prototype.regC = function(v) {
      return this.reg(Value.REG_C, v);
    };

    Dcpu16.prototype.regX = function(v) {
      return this.reg(Value.REG_X, v);
    };

    Dcpu16.prototype.regY = function(v) {
      return this.reg(Value.REG_Y, v);
    };

    Dcpu16.prototype.regZ = function(v) {
      return this.reg(Value.REG_Z, v);
    };

    Dcpu16.prototype.regI = function(v) {
      return this.reg(Value.REG_I, v);
    };

    Dcpu16.prototype.regJ = function(v) {
      return this.reg(Value.REG_J, v);
    };

    Dcpu16.prototype.regPC = function(v) {
      return this.reg(Value.REG_PC, v);
    };

    Dcpu16.prototype.regSP = function(v) {
      return this.reg(Value.REG_SP, v);
    };

    Dcpu16.prototype.regO = function(v) {
      return this.reg(Value.REG_O, v);
    };

    Dcpu16.prototype.loadBinary = function(bin, base) {
      var i, x, _i, _len, _results;
      if (base == null) {
        base = 0;
      }
      _results = [];
      for (i = _i = 0, _len = bin.length; _i < _len; i = ++_i) {
        x = bin[i];
        _results.push(this.mMemory[base + i] = x);
      }
      return _results;
    };

    Dcpu16.prototype.nextWord = function() {
      var pc;
      this.mCycles++;
      pc = this.mRegs[Value.REG_PC]++;
      return this.mMemory[pc];
    };

    Dcpu16.prototype.step = function() {
      var i;
      i = new Instr(this, this.nextWord());
      if (this.mSkipNext) {
        this.mSkipNext = false;
        if (this.mCondFail != null) {
          this.mCondFail(i);
        }
        return this.step();
      }
      if (this.mPreExec != null) {
        this.mPreExec(i);
      }
      this.exec(i.opc(), i.valA(), i.valB());
      if (this.mPostExec != null) {
        return this.mPostExec(i);
      }
    };

    Dcpu16.prototype.run = function() {
      var _results;
      this.mRun = true;
      _results = [];
      while (this.mRun) {
        _results.push(this.step());
      }
      return _results;
    };

    Dcpu16.prototype.stop = function() {
      return this.mRun = false;
    };

    Dcpu16.prototype.execAdv = function(opc, valA) {
      var addr;
      switch (opc) {
        case Instr.ADV_JSR:
          addr = this.push();
          this.mMemory[addr] = this.mRegs[Value.REG_PC];
          return this.mRegs[Value.REG_PC] = valA.get();
      }
    };

    Dcpu16.prototype.exec = function(opc, valA, valB) {
      var v;
      switch (opc) {
        case Instr.OPC_ADV:
          return this.execAdv(valA.raw(), valB);
        case Instr.OPC_SET:
          return valA.set(valB.get());
        case Instr.OPC_ADD:
          this.mCycles += 1;
          v = valA.get() + valB.get();
          if (v > 0xffff) {
            this.regO(1);
            v -= 0xffff;
          } else {
            this.regO(0);
          }
          return valA.set(v);
        case Instr.OPC_SUB:
          this.mCycles += 1;
          v = valA.get() - valB.get();
          if (v < 0) {
            this.regO(0xffff);
            v += 0xffff;
          } else {
            this.regO(0);
          }
          return valA.set(v);
        case Instr.OPC_MUL:
          this.mCycles += 1;
          v = valA.get() * valB.get();
          valA.set(v & 0xffff);
          return this.regO((v >> 16) & 0xffff);
        case Instr.OPC_DIV:
          this.mCycles += 2;
          if (valB.get() === 0) {
            return regA.set(0);
          } else {
            v = valA.get() / valB.get();
            valA.set(v & 0xffff);
            return this.regO(((valA.get() << 16) / valB.get) & 0xffff);
          }
          break;
        case Instr.OPC_MOD:
          this.mCycles += 2;
          if (valB.get() === 0) {
            return regA.set(0);
          } else {
            return valA.set(valA.get() % valB.get());
          }
          break;
        case Instr.OPC_SHL:
          this.mCycles += 1;
          valA.set(valA.get() << valB.get());
          return this.regO(((valA.get() << valB.get()) >> 16) & 0xffff);
        case Instr.OPC_SHR:
          this.mCycles += 1;
          valA.set(valA.get() >> valB.get());
          return this.regO(((valA.get() << 16) >> valB.get()) & 0xffff);
        case Instr.OPC_AND:
          return valA.set(valA.get() & valB.get());
        case Instr.OPC_BOR:
          return valA.set(valA.get() | valB.get());
        case Instr.OPC_XOR:
          return valA.set(valA.get() ^ valB.get());
        case Instr.OPC_IFE:
          if (valA.get() === valB.get()) {
            return this.mCycles += 2;
          } else {
            this.mSkipNext = true;
            return this.mCycles += 1;
          }
          break;
        case Instr.OPC_IFN:
          if (valA.get() !== valB.get()) {
            return this.mCycles += 2;
          } else {
            this.mSkipNext = true;
            return this.mCycles += 1;
          }
          break;
        case Instr.OPC_IFG:
          if (valA.get() > valB.get()) {
            return this.mCycles += 2;
          } else {
            this.mSkipNext = true;
            return this.mCycles += 1;
          }
          break;
        case Instr.OPC_IFB:
          if ((valA.get() & valB.get()) !== 0) {
            return this.mCycles += 2;
          } else {
            this.mSkipNext = true;
            return this.mCycles += 1;
          }
      }
    };

    return Dcpu16;

  })();

  exports.Dcpu16 = Dcpu16;

}).call(this);
