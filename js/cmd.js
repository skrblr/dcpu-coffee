// Generated by CoffeeScript 1.3.1
(function() {
  var Cmd, Module, rl;

  rl = require('readline');

  Module = {};

  Cmd = (function() {

    Cmd.name = 'Cmd';

    function Cmd() {
      this.prompt = "> ";
      this.identchars = "";
      this.lastcmd = "";
      this.intro = "";
      this.doc_header = "";
      this.misc_header = "";
      this.undoc_header = "";
      this.ruler = "=";
    }

    Cmd.prototype.cmdloop = function() {
      var cmd;
      cmd = this;
      this.iface = rl.createInterface(process.stdin, process.stdout, null);
      if (this.prompt === void 0) {
        this.prompt = "> ";
      }
      this.iface.setPrompt(this.prompt);
      this.iface.on('line', function(msg) {
        return cmd.onLine(msg);
      });
      console.log(this.intro);
      return this.iface.prompt();
    };

    Cmd.prototype.onLine = function(line) {
      this.onecmd(line.trim());
      return this.iface.prompt();
    };

    Cmd.prototype.onecmd = function(line) {
      var method, tokens;
      if (!line) {
        return this.emptyline();
      }
      this.lastcmd = line;
      tokens = line.split(' ');
      tokens = this.filterBuiltin('?', 'help', tokens);
      tokens = this.filterBuiltin('!', 'shell', tokens);
      method = "do_" + tokens[0];
      if (this[method]) {
        return this[method](tokens.slice(1));
      } else {
        return this["default"]();
      }
    };

    Cmd.prototype["default"] = function() {
      return console.log("Unknown Command");
    };

    Cmd.prototype.emptyline = function() {
      return this.onecmd(this.lastcmd);
    };

    Cmd.prototype.precmd = function(line) {
      return null;
    };

    Cmd.prototype.postcmd = function(stop, line) {
      return null;
    };

    Cmd.prototype.preloop = function() {
      return null;
    };

    Cmd.prototype.postloop = function() {
      return null;
    };

    Cmd.prototype.defaulthelp = function(cmd) {
      return console.log("No help for command " + cmd);
    };

    Cmd.prototype.commands = function() {
      var k, v, _results;
      _results = [];
      for (k in this) {
        v = this[k];
        if (k.slice(0, 3) === "do_") {
          _results.push(k.slice(3));
        }
      }
      return _results;
    };

    Cmd.prototype.filterBuiltin = function(char, kw, vec) {
      if (vec[0][0] === char) {
        return [kw].concat([vec[0].slice(1)], vec.slice(1));
      } else {
        return vec;
      }
    };

    Cmd.prototype.do_help = function(args) {
      var method;
      if (args[1] === void 0) {
        args[1] = "help";
      }
      method = "help_" + args[1];
      if (this[method]) {
        return this[method]();
      } else {
        return this.defaulthelp(args[1]);
      }
    };

    Cmd.prototype.help_help = function() {
      var cmd, _i, _len, _ref, _results;
      console.log("Usage: help <command>");
      console.log("Available Commands: ");
      _ref = this.commands();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cmd = _ref[_i];
        _results.push(console.log("  " + cmd));
      }
      return _results;
    };

    Cmd.prototype.do_shell = function(args) {
      return console.log("Invoked shell on " + args);
    };

    Cmd.prototype.help_shell = function() {
      return console.log("Does nothing.");
    };

    return Cmd;

  })();

  exports.Cmd = Cmd;

}).call(this);
