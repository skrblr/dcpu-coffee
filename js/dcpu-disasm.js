// Generated by CoffeeScript 1.3.1
(function() {
  var Disasm, Module, dcpu;

  Module = {};

  dcpu = require('./dcpu');

  Disasm = (function() {

    Disasm.name = 'Disasm';

    function Disasm() {}

    Disasm.OPC_DISASM = ["ADV", "SET", "ADD", "SUB", "MUL", "DIV", "MOD", "SHL", "SHR", "AND", "BOR", "XOR", "IFE", "IFN", "IFG", "IFB"];

    Disasm.ADV_OPC_DISASM = ["RSV", "JSR"];

    Disasm.REG_DISASM = ["A", "B", "C", "X", "Y", "Z", "I", "J", "PC", "SP", "O"];

    Disasm.ppInstr = function(instr) {
      if (instr.mOpc === 0) {
        process.stdout.write(Disasm.ADV_OPC_DISASM[instr.mValA.raw()]);
        process.stdout.write(" ");
        Disasm.ppValue(instr.mValB);
        return process.stdout.write("\n");
      } else {
        process.stdout.write(Disasm.OPC_DISASM[instr.mOpc]);
        process.stdout.write(" ");
        Disasm.ppValue(instr.mValA);
        process.stdout.write(", ");
        Disasm.ppValue(instr.mValB);
        return process.stdout.write("\n");
      }
    };

    Disasm.ppValue = function(val) {
      var enc;
      enc = val.raw();
      if ((0x00 <= enc && enc <= 0x07)) {
        return process.stdout.write(Disasm.REG_DISASM[enc]);
      } else if ((0x08 <= enc && enc <= 0x0f)) {
        process.stdout.write("[");
        process.stdout.write(Disasm.REG_DISASM[enc - 0x8]);
        return process.stdout.write("]");
      } else if ((0x10 <= enc && enc <= 0x17)) {
        process.stdout.write("[");
        process.stdout.write("0x" + val.mNext.toString(16));
        process.stdout.write("+");
        process.stdout.write(Disasm.REG_DISASM[enc - 0x10]);
        return process.stdout.write("]");
      } else if (enc === 0x18) {
        return process.stdout.write("POP");
      } else if (enc === 0x19) {
        return process.stdout.write("PEEK");
      } else if (enc === 0x1a) {
        return process.stdout.write("PUSH");
      } else if (enc === 0x1b) {
        return process.stdout.write("SP");
      } else if (enc === 0x1c) {
        return process.stdout.write("PC");
      } else if (enc === 0x1d) {
        return process.stdout.write("O");
      } else if (enc === 0x1e) {
        process.stdout.write("[");
        process.stdout.write("0x" + val.mNext.toString(16));
        return process.stdout.write("]");
      } else if (enc === 0x1f) {
        return process.stdout.write("0x" + val.mNext.toString(16));
      } else if ((0x20 <= enc && enc <= 0x3f)) {
        return process.stdout.write("0x" + (enc - 0x20).toString(16));
      }
    };

    return Disasm;

  })();

  exports.Disasm = Disasm;

}).call(this);
